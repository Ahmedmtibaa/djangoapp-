name: CI Docker Django

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  pull_request:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/myapp

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: pip install --no-cache-dir flake8
      - run: flake8 .

      - name: Check Dockerfile with hadolint
        run: |
          test -f "Dockerfile" || { echo "Dockerfile introuvable Ã  la racine"; exit 1; }
          docker run --rm -v "$PWD:/repo" hadolint/hadolint hadolint /repo/Dockerfile

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag

      - uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      scan: ${{ steps.eval.outputs.scan }}
    steps:
      - uses: actions/checkout@v4

      - name: Rebuild image for scan
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -f Dockerfile .

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Trivy scan to JSON (never fail)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          scanners: vuln
          format: json
          output: trivy.json
          vuln-type: 'os,library'
          severity: CRITICAL
          ignore-unfixed: true
          exit-code: 0
          hide-progress: true
          timeout: 10m

      - name: Evaluate CRITICAL count
        id: eval
        run: |
          if ! command -v jq >/dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi
          COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy.json)
          echo "CRITICAL_COUNT=$COUNT"
          if [ "$COUNT" -gt 0 ]; then
            echo "scan=failed" >> "$GITHUB_OUTPUT"
          else
            echo "scan=passed" >> "$GITHUB_OUTPUT"
          fi

  push:
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ needs.scan.outputs.scan == 'failed' && format('docker.io/{0}:insecure', env.IMAGE_NAME) || '' }}
